@startuml
'skinparam monochrome true
skinparam packageStyle rectangle
skinparam shadowing false
skinparam linetype polyline
'skinparam linetype orto

skinparam classAttributeIconSize 0

'left to right direction
package "UI" <<Folder>> {
    class AssignTeamAgendaUI {
    }
}

package "Controller" <<Folder>> {
    class AssignTeamAgendaController {
        + AssignTeamAgendaController(collaboratorRepository, agenda,teamRepository)
        + getAllByGSM()
        + getAllTeam()
        + assignTeamTask(teamCollaboratorName,taskParkName,taskName)
        - assignTeam(team,taskAgenda)
        - sendEmailTeam(team,msg)
        - getAllGreenSpaceByGSM(greenSpaceManager)
        - getAllTaskByGreenSpace(listGreenSpace)
        - getGSMFromSession()
    }
}
package "UI" <<Folder>> {
    class AssignTeamAgendaUI {
    }
}



'left to right direction
package "Domain" <<Folder>> {
    package "Domain.DTO" <<Folder>> {
        class TeamMapper{
            + List<TeamDto> toDTO<List<Team>list>
            + TeamDto toDTO(Team obj)
        }

        class TeamDto{
            + int id
            + TeamDto(id)
        }

        class TaskAgendaMapper{
            + List<TaskAgendaDto> toDTO<List<TaskAgenda>list>
            + TaskAgendaDto toDTO(TaskAgenda obj)
        }

        class TaskAgendaDto{
            + String greenSpaceName
            + String taskName
            + TaskAgendaDto(greenSpaceName,taskName)
        }
    }

    package "Domain.Application" <<Folder>> {

        class ApplicationSession
        {
            + static getInstance()
            + getCurrentSession()
        }

        class UserSession
        {
            + getUserEmail()
        }
    }

    package "Domain.Model" <<Folder>> {

        interface EmailService{
           + sendEmailByService(email,msg)
        }

        class DeiEmailService implements EmailService{

        }

        class GmailEmailService implements EmailService{

        }

        class Team{
            + verifyIdTeam(teamId)
            + sendEmail(msg)
        }

        interface ICollaborator{
            + hasEmail(email)
            + getEmail()
        }

        class Collaborator implements ICollaborator{
            - String name
            - Date dateOfBirth
            - Date admissionDate
            - String email
            - int taxpayer
            + hasEmail(email)
            + getEmail()
        }

        class GreenSpaceManager implements ICollaborator{
            - String name
            - Date dateOfBirth
            - Date admissionDate
            - String email
            - int taxpayer
            + getListGreenSpace()
            + hasEmail(email)
            + getEmail()
        }

        interface GreenSpace {
            + equalsGreenSpace(greenSpace)
            + hasName(name)
        }

        class Garden implements GreenSpace{
            - String name
            - int area
            - Address

            + Garden(name,area,streetName,postCodeNumber,localization)
            + getName()
            + getArea()
            + getAddress()
            - validationGreenSpace()
        }

        class MediumPark implements GreenSpace{
            - String name
            - int area
            - Address

            + getName()
            + getArea()
            + getAddress()
            + MediumPark(name,area,streetName,postCodeNumber,localization)
            - validationGreenSpace()
        }

        class LargePark implements GreenSpace{
            - String name
            - int area
            - Address

            + getName()
            + getArea()
            + getAddress()
            + LargePark(name,area,streetName,postCodeNumber,localization)
            - validationGreenSpace()

        }

        class GreenSpaces{
            + getGreenSpaceList()
        }

        class Agenda{

            + getAllTaskByGreenSpace(greenSpaceList)
            + getTaskByNameAndGreenSpace(taskParkName,taskName)
            + assignTeamTask(team,taskAgenda)
            - addListTaskByGreenSpace(task)
        }


        class TaskAgenda {

            - String urgency
            - int expectedDuration
            - date startDate
            - date endDate
            - String status

            + hasTaskName(taskName)
            + hasGreenSpaceName(taskParkName)
            + verifyGreenSpace(greenSpaceList)
            - verifyNullTeam()
            - equalsTask(taskAgenda)
            - updateTeam(team)


        }

    }

    package "Domain.Repository" <<Folder>> {

        class Repositories {

            - Repositories()
            + getInstance() : Repositories
            + getTeamRepository()
            + getAgenda()
            + getCollaboratorRepository()
        }

        class CollaboratorRepository {
            + getCollaboratorByEmail(email)
        }

        class GreenSpaceRepository {
            - addGreenSpace(greenSpace)
            - validationAllGreenSpace(greenSpace)
            + registerGreenSpace(name,area,streetName,postCode)
        }

        class TeamRepository{
            + getAllTeams()
            + getTeamById(teamId)
        }
    }
}

TeamMapper ..> TeamDto
TeamMapper ..> Team
TaskAgendaMapper ..> TaskAgendaDto
TaskAgendaMapper ..> TaskAgenda

'-------------------Instance-------------------
Repositories -> Repositories : instance
ApplicationSession -> ApplicationSession : instance

'-------------------UI-------------------
AssignTeamAgendaUI .> AssignTeamAgendaController
AssignTeamAgendaUI ..> TeamDto

'-------------------Controller-------------------
AssignTeamAgendaController ..> TeamDto
AssignTeamAgendaController ..> TeamMapper
AssignTeamAgendaController ..> Repositories : repositories
AssignTeamAgendaController ..> ApplicationSession
AssignTeamAgendaController ...> UserSession
AssignTeamAgendaController ...> GreenSpaceRepository

AssignTeamAgendaController ...> ICollaborator
AssignTeamAgendaController ...> Agenda
AssignTeamAgendaController ...> CollaboratorRepository
AssignTeamAgendaController ...> TeamRepository
AssignTeamAgendaController ...> GreenSpace
AssignTeamAgendaController ...> TaskAgenda
AssignTeamAgendaController ...> EmailService

AssignTeamAgendaController ...> Team


'-------------------ApplicationSession-------------------
ApplicationSession --> "1" UserSession : userSession

'-------------------Repositories-------------------
Repositories ---> "1" TeamRepository : TeamRepositoryRepository
Repositories ---> "1" CollaboratorRepository : CollaboratorRepository
Repositories ---> "1" Agenda : Agenda
Repositories ---> "1" GreenSpaceRepository :GreenSpaceRepository
GreenSpaceManager "1" ---> "1" GreenSpaces : greenSpaces


'-------------------CollaboratorRepository-------------------
CollaboratorRepository "1"  -> "*" ICollaborator : collaboratorList

'-------------------GreenSpaceRepository-------------------
GreenSpaceRepository "1" --> "*" GreenSpace : greenSpaceList

'-------------------GreenSpaceRepository-------------------
TeamRepository "1" --> "*" Team : teamList

'-------------------GreenSpace-------------------
GreenSpaces "1" -> "*" GreenSpace : greenSpaceList

Agenda "1" --> "*" TaskAgenda : taskAgendaList
TaskAgenda "*" ----> "1" GreenSpace : greenSpace
TaskAgenda "*" ---> "1" Team  : team

Team "*" <-- "1" EmailService : send email to all elements of
@enduml